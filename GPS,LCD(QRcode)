
// We use NodeMCU,OLED, and GPS module NEO-M8M
// the project will show QR that include important info about the patient.
// and send GPS coordinates to the server (Blynk IOT)


//////////////////////GPS Code 
// NEO-M8M GPS module module  VCC--> +5v(Vin)   GND-->GND
// No need for external power supply.
// try to be not inside the building to get signal
// it take about  2 or 3 miniutes to get GPS Signal
// and you will see led flashing of GPS module.
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
TinyGPSPlus gps;  // The TinyGPS++ object
SoftwareSerial ss(D6, D7); // The serial connection to the GPS (RX of GPS -->D7 , Tx-->D6)

float latitude , longitude;

String lat_str , lng_str;

float myLatitude=0.0;
float myLongitude=0.0;

float default_latitude=21.461500;  // default latitude
float default_longitude=39.200200; // default lonitude

//////////////////////end of GPS libraries & definitions


int mycounter=0;
int x=0;
// connect oled to nodemcu pin D2->SDA D1->SCK
/////////// to generate QR code use this link
//   https://www.the-qrcode-generator.com/

// to convert image to BMP use this link
//https://www.online-convert.com/
//https://www.online-convert.com/
// select convert to bmp
// make size 64x64 pixels
// Convert the BMP image to an array of HEX codes
// https://javl.github.io/image2cpp/
// https://javl.github.io/image2cpp/
//OLED LCD Connections 
// GND --> GND
// VDD --> +3.3v
// SCK --> D1
// SDA --> D2
/// oled display



#include "Adafruit_GFX.h"
#include "OakOLED.h"
OakOLED oled;

const unsigned char qr_code [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x80, 0x61, 0xe7, 0x00, 0x03, 
  0xe0, 0x00, 0x7f, 0x80, 0x61, 0xe6, 0x00, 0x03, 0xe7, 0xfe, 0x60, 0x66, 0x7f, 0xe7, 0x3f, 0xf3, 
  0xe7, 0xfe, 0x60, 0x66, 0x7f, 0xf7, 0x3f, 0xf3, 0xe6, 0x06, 0x78, 0x79, 0x81, 0xff, 0x30, 0x33, 
  0xe6, 0x06, 0x78, 0x79, 0x81, 0xff, 0x30, 0x33, 0xe6, 0x06, 0x78, 0x06, 0x18, 0x7f, 0x30, 0x33, 
  0xe6, 0x06, 0x78, 0x06, 0x18, 0x7f, 0x30, 0x33, 0xe6, 0x06, 0x61, 0x99, 0x98, 0x77, 0x30, 0x33, 
  0xe6, 0x06, 0x61, 0x99, 0x98, 0x63, 0x30, 0x33, 0xe7, 0xfe, 0x7f, 0x81, 0x9f, 0x83, 0x3f, 0xf3, 
  0xe7, 0xfe, 0x7f, 0x81, 0x9f, 0x83, 0x3f, 0xf3, 0xe0, 0x00, 0x66, 0x66, 0x66, 0x66, 0x00, 0x03, 
  0xe0, 0x00, 0x66, 0x66, 0x66, 0x66, 0x00, 0x03, 0xff, 0xff, 0xff, 0xe0, 0x79, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x79, 0x9f, 0xff, 0xff, 0xfe, 0x60, 0x61, 0xe7, 0xe1, 0xfd, 0xf7, 0xcf, 
  0xfe, 0x60, 0x61, 0xe7, 0xe1, 0xf8, 0xf3, 0xcf, 0xe1, 0xff, 0x9f, 0x99, 0xe0, 0x1f, 0xc3, 0x33, 
  0xe1, 0xff, 0x9f, 0x99, 0xe0, 0x1f, 0xc3, 0x33, 0xf8, 0x06, 0x79, 0x9f, 0xfe, 0x07, 0x23, 0x03, 
  0xf8, 0x06, 0x79, 0x9f, 0xfe, 0x02, 0x33, 0x03, 0xe0, 0x19, 0x9f, 0xe0, 0x1d, 0xe7, 0x0f, 0xf3, 
  0xe0, 0x19, 0x9f, 0xe0, 0x19, 0xf6, 0x0f, 0xf3, 0xe7, 0x86, 0x67, 0x86, 0x7e, 0x67, 0x87, 0x03, 
  0xe7, 0x86, 0x67, 0x86, 0x7e, 0x67, 0xc3, 0x03, 0xe1, 0xff, 0x80, 0x67, 0xf6, 0x67, 0x00, 0xe3, 
  0xe1, 0xff, 0x80, 0x67, 0xe6, 0x62, 0x00, 0xf3, 0xe0, 0x00, 0x1f, 0xf9, 0xe7, 0x9f, 0x3f, 0xcf, 
  0xe0, 0x00, 0x1f, 0xf9, 0xe7, 0x9f, 0x3f, 0xcf, 0xe6, 0x1f, 0xf8, 0x06, 0x07, 0xe0, 0x3f, 0x0f, 
  0xe6, 0x1f, 0xf8, 0x06, 0x07, 0xe0, 0x3f, 0x0f, 0xfe, 0x66, 0x61, 0x88, 0x08, 0x78, 0xc7, 0x8f, 
  0xfe, 0x66, 0x61, 0x98, 0x18, 0x7d, 0xc3, 0xcf, 0xe6, 0x61, 0xfe, 0x06, 0x1f, 0x80, 0xfd, 0xc7, 
  0xe6, 0x61, 0xfe, 0x06, 0x1f, 0x81, 0xfc, 0xc3, 0xfe, 0x1e, 0x7d, 0x8f, 0x87, 0xe0, 0x7c, 0x3f, 
  0xfe, 0x1e, 0x79, 0x9f, 0x87, 0xe0, 0x3c, 0x3f, 0xe1, 0xf9, 0xf0, 0x1f, 0xf9, 0xe0, 0x02, 0x07, 
  0xe1, 0xf9, 0xe0, 0x1f, 0xf9, 0xe0, 0x03, 0x03, 0xe7, 0xf6, 0x03, 0x87, 0x00, 0xa0, 0x03, 0x03, 
  0xe7, 0xe6, 0x07, 0x86, 0x00, 0x00, 0x03, 0x03, 0xef, 0xff, 0x67, 0x0f, 0x63, 0xe2, 0x23, 0x07, 
  0xff, 0xff, 0xe6, 0x1f, 0xe7, 0xf7, 0xf3, 0x0f, 0xf7, 0xff, 0x76, 0x1f, 0x75, 0xe7, 0x73, 0x0f, 
  0xe0, 0x00, 0x79, 0xf8, 0x79, 0xf6, 0x33, 0xc3, 0xe0, 0x00, 0x79, 0xf8, 0x78, 0xe7, 0x73, 0xc7, 
  0xe7, 0xfe, 0x61, 0x87, 0x98, 0x07, 0xf0, 0xcf, 0xe7, 0xfe, 0x61, 0xc7, 0x98, 0x03, 0xe1, 0xcf, 
  0xe6, 0x06, 0x61, 0xf8, 0x79, 0xf0, 0x03, 0xf3, 0xe6, 0x06, 0x61, 0xf8, 0x79, 0xe0, 0x03, 0xf7, 
  0xe6, 0x06, 0x7e, 0x07, 0x99, 0x87, 0xcc, 0x3f, 0xe6, 0x06, 0x7e, 0x03, 0xdd, 0x83, 0xdc, 0x3f, 
  0xe6, 0x06, 0x66, 0x61, 0xfe, 0x60, 0xfc, 0x3f, 0xe6, 0x06, 0x66, 0x61, 0xff, 0x71, 0xf8, 0x3f, 
  0xe7, 0xfe, 0x79, 0x9e, 0x67, 0xff, 0xf0, 0x03, 0xe7, 0xfe, 0x79, 0x9e, 0x23, 0xff, 0xf0, 0x07, 
  0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x33, 0x0f, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x77, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


////////////////////////////// blynk
// Template ID, Device Name and Auth Token are provided by the Blynk.Cloud
// See the Device Info tab, or Template settings
#define BLYNK_TEMPLATE_ID "TMPLWuCFnhfM"
#define BLYNK_DEVICE_NAME "GPS Tracker"
#define BLYNK_AUTH_TOKEN "7U_OJzT5xgV0z7h5pARMDGE2pZ8pZjWk"

// Comment this out to disable prints and save space
#define BLYNK_PRINT Serial


#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

char auth[] = BLYNK_AUTH_TOKEN;

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "mywifi01";
char pass[] = "87654321";
//////////////////////////////end of blynk
void setup() {
 // Serial.begin(9600);
  Serial.println("start System");
ss.begin(9600);// gps code
  
  
  // put your setup code here, to run once:
  oled.begin();
  oled.clearDisplay();
  oled.setTextSize(1);
  oled.setTextColor(1);
  oled.setCursor(0, 0);
  oled.println("Hello !!");
  oled.display();
  
  delay(3000);

  
if ( ! Blynk.connected() )
{oled.clearDisplay();
  while ( ! Blynk.connected() )
  {
    // try connect again
  oled.setTextSize(1);
  oled.setTextColor(1);
  oled.setCursor(0, 0);
  oled.println("Try to connect server");
  oled.display();
  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);  // blynk
  }
  oled.clearDisplay();
  oled.setTextSize(1);
  oled.setTextColor(1);
  oled.setCursor(0, 0);
  oled.println("connected !!");
  oled.display();
  delay(500);
  show_QR_code(); 
}
for(int mm=0;mm<10;mm++)
  Blynk.run();
Blynk.virtualWrite(V2, 40.1);
}

void loop() {
  // put your main code here, to run repeatedly:
Blynk.run();

if ( ! Blynk.connected() )
{
  oled.clearDisplay();
  while ( ! Blynk.connected() )
  {
    // try connect again
    oled.setTextSize(1);
  oled.setTextColor(1);
  oled.setCursor(0, 0);
  oled.println("-Try to connect");
  oled.display();
  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);  // blynk
  }
  oled.clearDisplay();
  oled.setTextSize(1);
  oled.setTextColor(1);
  oled.setCursor(0, 0);
  oled.println("-connected !!  ");
  oled.display();
  delay(500);
  show_QR_code(); 
}

mycounter++;
if(mycounter>=60000)
{
  mycounter=0;
  
  Blynk.virtualWrite(V0, longitude, latitude);
  Blynk.virtualWrite(V1, latitude);
  Blynk.virtualWrite(V2, longitude);
}





   while (ss.available() > 0)
  { 

    if (gps.encode(ss.read()))

    {
      //Serial.println("encode");

      if (gps.location.isValid())

      {//Serial.println("isValid");

        latitude = gps.location.lat();

        lat_str = String(latitude , 6);

        longitude = gps.location.lng();

        lng_str = String(longitude , 6);
//        Serial.print("latitude:");
//        Serial.print(latitude,6);
//        Serial.print(" Longitude:");
//        Serial.println(longitude,6);
        // Serial.print(latitude,6);
        // Serial.print(",");
        //  Serial.println(longitude,6);
      }
      else
    {
      latitude = default_latitude;
      longitude = default_longitude;
    }
    }
   /* else
    {
      latitude = default_latitude;
      longitude = default_longitude;
    }*/
   }
    
    
}
void show_QR_code()
{
oled.clearDisplay();
//oled.drawBitmap( 60, 35, bitmap, 28, 28, 1);
oled.drawBitmap( 0, 0, qr_code, 64, 64, 1);
oled.setTextSize(2);
oled.setTextColor(1);
oled.setCursor(70, 0);
oled.println("Scan");
oled.setCursor(70, 25);
oled.println("QR");
oled.display();

}
